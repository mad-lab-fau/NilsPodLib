.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_load_sensor_session.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_load_sensor_session.py:

A simple example showing how to work with Sensor Sessions.



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    This session has 3 datasets
    This session has 3 datasets
    gyro of 922a has the length 4799
    acc of 922a has the length 4799
    gyro of 7fad has the length 4799
    acc of 7fad has the length 4799
    gyro of 323c has the length 4800
    acc of 323c has the length 4800
    analog of 323c has the length 4800
    The included sensors are: ('922a', '7fad', '323c')
    The samplingrates are: (204.8, 204.8, 204.8)
    The enabled sensor are: (('gyro', 'acc'), ('gyro', 'acc'), ('gyro', 'acc', 'analog'))
    The master of the session is 7fad
    The slaves of the session are ['922a', '323c']
    922a has the same counter than master (7fad)
    323c has the same counter than master (7fad)




|


.. code-block:: default

    from pathlib import Path
    import numpy as np

    from NilsPodLib import Dataset, Session, SyncedSession

    FILEPATH = Path('../tests/test_data/synced_sample_session/')

    # A session consists of multiple datasets. By default this is also the way to create one
    datasets = [Dataset.from_bin_file(d) for d in FILEPATH.glob('*.bin')]
    session = Session(datasets)
    print('This session has {} datasets'.format(len(session.datasets)))

    # However, in many cases it is easier to use one of the Session constructors:
    session = Session.from_folder_path(FILEPATH, filter_pattern='*.bin')
    print('This session has {} datasets'.format(len(session.datasets)))

    # Like Datasets contain convenience methods to act on all Datastreams, Sessions provide methods that work on all
    # datasets

    downsampled_session = session.downsample(factor=2)
    for ds in downsampled_session.datasets:
        for name, d in ds.datastreams:
            print('{} of {} has the length {}'.format(name, ds.info.sensor_id, len(d.data)))

    # Further you can use the Proxy Attribute `info` to access the header infos of all sensors at the same time
    print('The included sensors are:', session.info.sensor_id)
    print('The samplingrates are:', session.info.sampling_rate_hz)
    print('The enabled sensor are:', session.info.enabled_sensors)

    # The library differentiates between synchronised and not synchronised session.
    # If your session is synchronised your should use a SyncedSession

    session = SyncedSession.from_folder_path(FILEPATH)

    # This will also validate that all datasets are compatible to be syncronised.
    # If you need to switch off this validation, you can disable it using:
    SyncedSession.VALIDATE_ON_INIT = False
    session = SyncedSession.from_folder_path(FILEPATH)

    # For synced sessions you can get the datasets of the master and the slaves separately

    print('The master of the session is', session.master.info.sensor_id)
    print('The slaves of the session are', [d.info.sensor_id for d in session.slaves])

    # To make use of the sync information, all datasets need to be aligned. This can be done using the `cut_to_syncregion`
    # method.

    cut_session = session.cut_to_syncregion()

    # After this all session are aligned and the dataset counter are identical

    for d in cut_session.slaves:
        if np.array_equal(d.counter, cut_session.master.counter) is True:
            print('{} has the same counter than master ({})'.format(d.info.sensor_id, cut_session.master.info.sensor_id))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.398 seconds)


.. _sphx_glr_download_auto_examples_load_sensor_session.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: load_sensor_session.py <load_sensor_session.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: load_sensor_session.ipynb <load_sensor_session.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
